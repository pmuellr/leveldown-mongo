// Generated by CoffeeScript 1.6.3
var AbstractLeveldown, JL, JS, buffer, isBuffer, mongodb, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

buffer = require("buffer");

_ = require("underscore");

mongodb = require("mongodb");

AbstractLeveldown = require("abstract-leveldown");

module.exports = function(mdb) {
  var MongoLeveldown;
  if (mdb == null) {
    throw Error("database argument was null");
  }
  if (!(mdb instanceof mongodb.Db)) {
    throw Error("database argument not instance of mongodb.Db");
  }
  return MongoLeveldown = (function(_super) {
    __extends(MongoLeveldown, _super);

    MongoLeveldown.destroy = function(location, callback) {
      return mdb.dropCollection(location, function(err) {
        if (err) {
          return callback(err);
        }
        return callback();
      });
    };

    MongoLeveldown.repair = function(location, callback) {
      return process.nextTick(function() {
        return callback();
      });
    };

    function MongoLeveldown(location, options) {
      if (!(this instanceof MongoLeveldown)) {
        return new MongoLeveldown(location, options);
      }
      MongoLeveldown.__super__.constructor.call(this, location, options);
    }

    MongoLeveldown.prototype._open = function(options, callback) {
      var mdbOptions,
        _this = this;
      mdbOptions = {
        w: 1,
        fsync: true
      };
      if (options.createIfMissing === false) {
        mdbOptions.strict = true;
      }
      return mdb.collection(this.location, mdbOptions, function(err, coll) {
        if (err != null) {
          return callback(err);
        }
        if (options.errorIfExists) {
          return callback(Error("collection already exists: " + _this.location));
        }
        _this.coll = coll;
        return callback();
      });
    };

    MongoLeveldown.prototype._close = function(callback) {
      return process.nextTick(function() {
        return callback();
      });
    };

    MongoLeveldown.prototype._get = function(key, options, callback) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (options.asBuffer == null) {
        options.asBuffer = true;
      }
      return this.coll.findOne({
        key: key
      }, function(err, doc) {
        var val;
        if (err != null) {
          return callback(err);
        }
        if (doc == null) {
          return callback(Error("NotFound"));
        }
        val = doc.val;
        if (options.asBuffer) {
          val = new buffer.Buffer(val, "utf8");
        }
        return callback(null, val);
      });
    };

    MongoLeveldown.prototype._put = function(key, val, options, callback) {
      var doc, mdbOptions,
        _this = this;
      mdbOptions = {
        w: 1
      };
      if (options.sync) {
        mdbOptions.fsync = true;
      }
      doc = {
        key: key,
        val: val
      };
      if (isBuffer(val)) {
        doc.val = val.toString("utf8");
      }
      return this.coll.remove({
        key: key
      }, mdbOptions, function(err) {
        if (err != null) {
          return callback(err);
        }
        return _this.coll.insert(doc, mdbOptions, function(err) {
          if (err != null) {
            return callback(error);
          }
          return callback();
        });
      });
    };

    MongoLeveldown.prototype._del = function(key, options, callback) {
      var mdbOptions;
      mdbOptions = {
        w: 1
      };
      if (options.sync) {
        mdbOptions.fsync = true;
      }
      return this.coll.remove({
        key: key
      }, mdbOptions, function(err) {
        if (err != null) {
          return callback(err);
        }
        return callback();
      });
    };

    MongoLeveldown.prototype._batch = function(array, options, callback) {
      var doc, key, type, val, value, _i, _len, _ref;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        _ref = array[_i], type = _ref.type, key = _ref.key, value = _ref.value;
        val = value;
        doc = {
          key: key,
          val: val
        };
        if (type === "del") {
          this.coll.remove({
            key: key
          }, {
            w: 0
          });
        } else if (type === "put") {
          this.coll.remove({
            key: key
          }, {
            w: 0
          });
          this.coll.insert(doc, {
            w: 0
          });
        }
      }
      return process.nextTick(function() {
        return callback();
      });
    };

    MongoLeveldown.prototype._approximateSize = function(start, end, callback) {
      return 0;
    };

    return MongoLeveldown;

  })(AbstractLeveldown.AbstractLevelDOWN);
};

JS = function(object) {
  return JSON.stringify(object);
};

JL = function(object) {
  return JSON.stringify(object, null, 4);
};

isBuffer = function(object) {
  return buffer.Buffer.isBuffer(object);
};
